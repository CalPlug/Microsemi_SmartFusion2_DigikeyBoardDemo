/*******************************************************************************
#include "platform.h"
#include "drivers/CorePWM/core_pwm.h"
#include "drivers/mss_timer/mss_timer.h"
#include "CMSIS/system_m2sxxx.h"
#include "hal.h"
#include "drivers/CoreUARTapb/core_uart_apb.h"
#include "drivers/CoreGPIO/core_gpio.h"
#include "m2sxxx.h"
#include <stdio.h>  //used for ARM Semihosting (Console Debug)
//**************************************************************************************************/
//Debugging Control     NOTE: Comment out on production eNVM builds to avoid Semihosting errors!!  (There is no target for the debug messages when running without a console)
#define VERBOSEDEBUGCONSOLE //Verbose debugging in console using ARM Semihosting, comment out to disable console debug messages - do not go too crazy with Semihosting, it will slow down operation if used excessively.
//**************************************************************************************************/

#ifdef VERBOSEDEBUGCONSOLE
	   extern void initialise_monitor_handles(void); //ARM Semihosting enabled
#endif

	  // ******************************************************************************
	  //  * Delay count used to time the delay between duty cycle updates.  (Unless fabric is changed please do not modify, unless you have an exceedingly good reason to do so)
	  // *****************************************************************************/
	   #define DELAY_COUNT     6500  //principle multiplier to set delays in function (changing this changes the length of all delays, modify with caution, should be set so a delay of 1000 = 1 second, hence a unit is equalled approximately to 1 ms)


 /******************************************************************************
 * Local function prototypes.
 *****************************************************************************/
	   void delay( int mult );



/******************************************************************************
 * Program MAIN function.
 *****************************************************************************/
int main( void )
{

	#ifdef VERBOSEDEBUGCONSOLE
	initialise_monitor_handles(); //ARM Semihosting enabled
	iprintf("Debug messages via ARM Semihosting initialized\n");  //Notification of Semihosting enabled
	#endif


	    #ifdef VERBOSEDEBUGCONSOLE
	        iprintf("Loop Run 1\n");
	    #endif
	    	delay (500); //Pause at HOLD position then continue operation

#ifdef VERBOSEDEBUGCONSOLE
    iprintf("Loop Run 2\n");
#endif
	delay (500); //Pause at HOLD position then continue operation

	return 0;
}


/******************************************************************************
 * Delay function.
 *****************************************************************************/
void delay( int mult )
{
    volatile int counter = 0;

    while ( counter < (DELAY_COUNT*mult) )
    {
        counter++;
    }
}

